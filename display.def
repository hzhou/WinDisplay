include: macros/display_copy.def

#----------------------------------------------------------------- 
#- Based on windows DIB, which is upside down (right side up for mathematicians)
#----------------------------------------------------------------- 

macros:
    FontType: struct font *

subcode: _autoload
    $class display_buffer
    $struct(display_buffer) unsigned char * buffer, int width, int height 

    $register_name(p_disp) struct display_buffer *

    #---- map to screen ----
    $struct(display_buffer) int offset_x, int offset_y
    #---- scale
    $struct(display_buffer) float pt
    #---- graphic state ----
    $struct(display_buffer) float x, float y
    $struct(display_buffer) $(FontType) font, int size
    $struct(display_buffer) float matrix[6]

subcode: display_buffer_init(var, scope, @type)
    $global struct display_buffer $(var)
    memset(&$(var), 0, sizeof($(var)))
    $(var).buffer=NULL
    $(var).pt = 1.0

    $set_var_attr $(var), class=display_buffer

subcode: display_buffer_set_page(var, w, h)
    f_disp_set_page(&$(var), $(w), $(h))

subcode: display_buffer_resize(var, w, h)
    f_disp_resize(&$(var), $(w), $(h))

subcode: display_buffer_offset(var, x, y)
    $(var).offset_x=$(x)
    $(var).offset_y=$(y)

#---------------------------------------- 
fncode: f_disp_set_page(p_disp, tn_w, tn_h)
    $(set:D=p_disp->$1)
    tf_aspect = (float)(8.5/11)
    tn_margin = 20
    tn_w2 = tn_w - tn_margin
    tn_h2 = tn_h - tn_margin
    $if tn_h2*tf_aspect > tn_w2
        tn_h2 = (int)(tn_w2 / tf_aspect)
    $else
        tn_w2 = (int)(tn_h2 * tf_aspect)
    f_disp_resize(p_disp, tn_w2, tn_h2)
    $(D:pt) = tn_w2 / (float)(8.5*72)
    $(D:offset_x) = (tn_w - tn_w2)/2
    $(D:offset_y) = (tn_h - tn_h2)/2

fncode: f_disp_resize(p_disp, tn_w, tn_h)
    $(set:D=p_disp->$1)
    $if $(D:buffer)
	free($(D:buffer))
    $(D:width) = tn_w
    $(D:height) = tn_h

    tn_size    = tn_w * tn_h * 4
    $(D:buffer)=malloc(tn_size)
    memset($(D:buffer), 255, tn_size)

    $if $(D:font) && $(D:size)>0
        font_set_size($(D:font), $(D:size), $(D:pt))

#---------------------------------------- 
#-  drawing routines
#---------------------------------------- 
subcode: display_buffer_set_rect(var, margin, thick, color)
    $include stdint
    $local pu4_pixel
    pu4_pixel=(uint32_t *)$(var).buffer
    tn_w=$(var).width-$(margin)*2
    tn_h=$(var).height-($(margin)+$(thick))*2
    # Horizontoal stroke
    $for i=0:$(thick)
	k=($(margin)+i)*$(var).width+$(margin)
	$for j=0:tn_w
	    pu4_pixel[k]=$(color)
	    k++
	k=($(var).height-$(margin)-i-1)*$(var).width+$(margin)
	$for j=0:tn_w
	    pu4_pixel[k]=$(color)
	    k++
    # Vertical stroke
    $for j=0:$(thick)
	k=($(margin)+$(thick))*$(var).width + $(margin)+j
	$for i=0:tn_h
	    pu4_pixel[k]=$(color)
	    k+=$(var).width
	k=($(margin)+$(thick))*$(var).width + $(margin)+tn_w-j-1
	$for i=0:tn_h
	    pu4_pixel[k]=$(color)
	    k+=$(var).width

#---------------------------------------- 
subcode: display_buffer_set_font(var, fontname, size)
    $(set:D=$(var).$1)
    $(var).font=load_font($(fontname))
    $(var).size = $(size)
    $if $(D:font) && $(D:size)>0 
        font_set_size($(D:font), $(D:size), $(D:pt))

subcode: display_buffer_set_size(var, size)
    $(set:D=$(var).$1)
    $(var).size = $(size)
    $if $(D:font) && $(D:size)>0 
        font_set_size($(D:font), $(D:size), $(D:pt))

subcode: display_buffer_moveto(var, x, y)
    $(var).x=$(x)
    $(var).y=$(y)

subcode: display_buffer_text(var, str)
    f_disp_add_text(&$(var), $(str))

subcode: display_buffer_text_line(var, str)
    $(set:D=$(var).$1)
    tf_save_x=$(D:x)
    f_disp_add_text(&$(var), $(str))
    $(D:y)-=$(D:size)
    $(D:x)=tf_save_x

fncode: f_disp_add_text(p_disp, s)
    $(set:D=p_disp->$1)
    $(set:G=p_glyf->$1)
    $while *s; s++
        p_glyf = font_render($(D:font), *s)
        tn_x=(int)($(D:x)*$(D:pt))
        tn_y=(int)($(D:y)*$(D:pt))
        $(if:1)
            f_disp_copy_gray(p_disp, tn_x-$(G:x), tn_y-$(G:y), $(G:buf), $(G:w), $(G:h))
        $(else)
            #-- font_subpixel
            f_disp_copy_rgb(p_disp, tn_x-$(G:x), tn_y-$(G:y), $(G:buf), $(G:w), $(G:h))
        $(D:x)+=$(G:advance)/$(D:pt)


